// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fff

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DdddClient is the client API for Dddd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DdddClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	TestNewHello(ctx context.Context, in *NewHelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type ddddClient struct {
	cc grpc.ClientConnInterface
}

func NewDdddClient(cc grpc.ClientConnInterface) DdddClient {
	return &ddddClient{cc}
}

func (c *ddddClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/ddd.fff.dddd/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ddddClient) TestNewHello(ctx context.Context, in *NewHelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/ddd.fff.dddd/TestNewHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DdddServer is the server API for Dddd service.
// All implementations must embed UnimplementedDdddServer
// for forward compatibility
type DdddServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	TestNewHello(context.Context, *NewHelloRequest) (*HelloReply, error)
	mustEmbedUnimplementedDdddServer()
}

// UnimplementedDdddServer must be embedded to have forward compatible implementations.
type UnimplementedDdddServer struct {
}

func (UnimplementedDdddServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedDdddServer) TestNewHello(context.Context, *NewHelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestNewHello not implemented")
}
func (UnimplementedDdddServer) mustEmbedUnimplementedDdddServer() {}

// UnsafeDdddServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DdddServer will
// result in compilation errors.
type UnsafeDdddServer interface {
	mustEmbedUnimplementedDdddServer()
}

func RegisterDdddServer(s grpc.ServiceRegistrar, srv DdddServer) {
	s.RegisterService(&Dddd_ServiceDesc, srv)
}

func _Dddd_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DdddServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddd.fff.dddd/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DdddServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dddd_TestNewHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DdddServer).TestNewHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddd.fff.dddd/TestNewHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DdddServer).TestNewHello(ctx, req.(*NewHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dddd_ServiceDesc is the grpc.ServiceDesc for Dddd service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dddd_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ddd.fff.dddd",
	HandlerType: (*DdddServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Dddd_SayHello_Handler,
		},
		{
			MethodName: "TestNewHello",
			Handler:    _Dddd_TestNewHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dddd.proto",
}
